name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'   # Triggers on push to any branch
  pull_request:
    branches:
      - '**'   # Triggers on PRs to any branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ job.status == 'success' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Code Formatting Check
        run: black --check .

      - name: Linting
        run: flake8 .

      - name: Static Type Checking
        run: mypy .

      - name: Run Unit Tests with Coverage
        run: |
          mkdir -p reports
          pytest tests/ --junitxml=reports/test-results.xml --cov=. --cov-report=xml --cov-report=html:reports/coverage

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Test Results
          path: reports/test-results.xml

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Coverage Report
          path: reports/coverage.xml

      - name: Security Scan
        run: bandit -r .

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.build-and-test.result == 'success'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Databricks CLI
        run: pip install databricks-cli

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks configure --token <<EOF
          $DATABRICKS_HOST
          $DATABRICKS_TOKEN
          EOF

      - name: Trigger Databricks Job
        run: |
          databricks jobs run-now --job-id ${{ secrets.DATABRICKS_JOB_ID }}
